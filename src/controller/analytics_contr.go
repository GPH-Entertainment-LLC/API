package controller

import (
	"net/http"
	"slices"
	"strconv"
	"time"
	"xo-packs/core"
	"xo-packs/service"

	"github.com/gin-gonic/gin"
	"github.com/swaggo/swag/example/celler/httputil"
)

type AnalyticsController struct {
	analyticsService service.AnalyticsService
}

func NewAnalyticsController(analyticsService service.AnalyticsService) *AnalyticsController {
	return &AnalyticsController{analyticsService: analyticsService}
}

func (contr AnalyticsController) Register(router *gin.Engine) {
	router.GET("/analytics/totalPacksSold/:vendorId", contr.TotalVendorPacksSold)
	router.GET("/analytics/totalRevenue/:vendorId", contr.TotalRevenueGenerated)
	router.GET("/analytics/avgPacksPurchased/:vendorId", contr.AvgPackQtyPurchased)
	router.GET("/analytics/minPacksPurchased/:vendorId", contr.MinPackQtyPurchased)
	router.GET("/analytics/maxPacksPurchased/:vendorId", contr.MaxPackQtyPurchased)
	router.GET("/analytics/favoriteAmount/:vendorId", contr.FavoriteAmount)
	router.GET("/analytics/customers/:vendorId", contr.TopCustomers)
	router.GET("/analytics/packSales/:vendorId", contr.PackSales)
	router.GET("/analytics/packQtySold/:vendorId", contr.PackQtySold)
}

// @Summary			Get total vendor packs sold
// @Description		Get a total value of all packs sold by this vendor
// @Param			vendorId path string true "vendor uid"
// @Accept			json
// @Produce			json
// @Tags			Analytics
// @Success			200 {} int
// @Failure 		400 {object} httputil.HTTPError
// @Failure 		500 {object} httputil.HTTPError
// @Router			/analytics/totalPacksSold/:vendorId [get]
func (contr AnalyticsController) TotalVendorPacksSold(c *gin.Context) {
	vendorId := c.Param("vendorId")
	if vendorId == "" {
		httputil.NewError(c, http.StatusBadRequest, &core.ErrorResp{Message: "vendorId param must be set"})
		return
	}

	totalAmount, err := contr.analyticsService.TotalVendorPacksSold(c.Request.Context(), vendorId)
	if err != nil {
		httputil.NewError(c, http.StatusInternalServerError, err)
		return
	}
	c.JSON(http.StatusOK, totalAmount)
	return
}

// @Summary			Get total revenue
// @Description		Get the total revenue generated by this vendor
// @Param			vendorId path string true "vendor uid"
// @Accept			json
// @Produce			json
// @Tags			Analytics
// @Success			200 {} float
// @Failure 		400 {object} httputil.HTTPError
// @Failure 		500 {object} httputil.HTTPError
// @Router			/analytics/totalRevenue/:vendorId [get]
func (contr AnalyticsController) TotalRevenueGenerated(c *gin.Context) {
	vendorId := c.Param("vendorId")
	if vendorId == "" {
		httputil.NewError(c, http.StatusBadRequest, &core.ErrorResp{Message: "vendorId param must be set"})
		return
	}

	totalRevenue, err := contr.analyticsService.TotalRevenueGenerated(c.Request.Context(), vendorId)
	if err != nil {
		httputil.NewError(c, http.StatusInternalServerError, err)
		return
	}
	c.JSON(http.StatusOK, totalRevenue)
	return
}

// @Summary			Get average pack qty purchased
// @Description		Get the average amount of packs purchased by a user at a time
// @Param			vendorId path string true "vendor uid"
// @Accept			json
// @Produce			json
// @Tags			Analytics
// @Success			200 {} float
// @Failure 		400 {object} httputil.HTTPError
// @Failure 		500 {object} httputil.HTTPError
// @Router			/analytics/avgPacksPurchased/:vendorId [get]
func (contr AnalyticsController) AvgPackQtyPurchased(c *gin.Context) {
	vendorId := c.Param("vendorId")
	if vendorId == "" {
		httputil.NewError(c, http.StatusBadRequest, &core.ErrorResp{Message: "vendorId param must be set"})
		return
	}

	avgPurchased, err := contr.analyticsService.AvgPackQtyPurchased(c.Request.Context(), vendorId)
	if err != nil {
		httputil.NewError(c, http.StatusInternalServerError, err)
		return
	}
	c.JSON(http.StatusOK, avgPurchased)
	return
}

// @Summary			Get the min pack qty purchased
// @Description		Get the min amount of packs purchased by a user at a time
// @Param			vendorId path string true "vendor uid"
// @Accept			json
// @Produce			json
// @Tags			Analytics
// @Success			200 {} int
// @Failure 		400 {object} httputil.HTTPError
// @Failure 		500 {object} httputil.HTTPError
// @Router			/analytics/minPacksPurchased/:vendorId [get]
func (contr AnalyticsController) MinPackQtyPurchased(c *gin.Context) {
	vendorId := c.Param("vendorId")
	if vendorId == "" {
		httputil.NewError(c, http.StatusBadRequest, &core.ErrorResp{Message: "vendorId param must be set"})
		return
	}

	minPurchased, err := contr.analyticsService.MinPackQtyPurchased(c.Request.Context(), vendorId)
	if err != nil {
		httputil.NewError(c, http.StatusInternalServerError, err)
		return
	}
	c.JSON(http.StatusOK, minPurchased)
	return
}

// @Summary			Get the max pack qty purchased
// @Description		Get the max amount of packs purchased by a user at a time
// @Param			vendorId path string true "vendor uid"
// @Accept			json
// @Produce			json
// @Tags			Analytics
// @Success			200 {} int
// @Failure 		400 {object} httputil.HTTPError
// @Failure 		500 {object} httputil.HTTPError
// @Router			/analytics/maxPacksPurchased/:vendorId [get]
func (contr AnalyticsController) MaxPackQtyPurchased(c *gin.Context) {
	vendorId := c.Param("vendorId")
	if vendorId == "" {
		httputil.NewError(c, http.StatusBadRequest, &core.ErrorResp{Message: "vendorId param must be set"})
		return
	}

	maxPurchased, err := contr.analyticsService.MaxPackQtyPurchased(c.Request.Context(), vendorId)
	if err != nil {
		httputil.NewError(c, http.StatusInternalServerError, err)
		return
	}
	c.JSON(http.StatusOK, maxPurchased)
	return
}

// @Summary			Get the favorite amount for vendor
// @Description		Get the current favorite amount for this vendor
// @Param			vendorId path string true "vendor uid"
// @Accept			json
// @Produce			json
// @Tags			Analytics
// @Success			200 {} int
// @Failure 		400 {object} httputil.HTTPError
// @Failure 		500 {object} httputil.HTTPError
// @Router			/analytics/favoriteAmount/:vendorId [get]
func (contr AnalyticsController) FavoriteAmount(c *gin.Context) {
	vendorId := c.Param("vendorId")
	if vendorId == "" {
		httputil.NewError(c, http.StatusBadRequest, &core.ErrorResp{Message: "vendorId param must be set"})
		return
	}

	favoriteAmount, err := contr.analyticsService.FavoriteAmount(c.Request.Context(), vendorId)
	if err != nil {
		httputil.NewError(c, http.StatusInternalServerError, err)
		return
	}
	c.JSON(http.StatusOK, favoriteAmount)
	return
}

// @Summary			Get list of top customers
// @Description		Get a list of the top customers for a specific vendor
// @Param			vendorId path string true "vendor uid"
// @Accept			json
// @Produce			json
// @Tags			Analytics
// @Success			200 {object} []model.CustomerAnalytic
// @Failure 		400 {object} httputil.HTTPError
// @Failure 		500 {object} httputil.HTTPError
// @Router			/analytics/customers/:vendorId [get]
func (contr AnalyticsController) TopCustomers(c *gin.Context) {
	vendorId := c.Param("vendorId")
	if vendorId == "" {
		httputil.NewError(c, http.StatusBadRequest, &core.ErrorResp{Message: "vendorId param must be set"})
		return
	}

	customers, err := contr.analyticsService.TopCustomers(c.Request.Context(), vendorId)
	if err != nil {
		httputil.NewError(c, http.StatusInternalServerError, err)
		return
	}
	c.JSON(http.StatusOK, customers)
	return
}

// @Summary			Get the pack sales analytics
// @Description		Get pack sales analytics for a vendor
// @Param			vendorId path string true "vendor uid"
// @Param			granularity query string true "time granularity"
// @Param			month query int true "month filter"
// @Param			year query int true "year filter"
// @Accept			json
// @Produce			json
// @Tags			Analytics
// @Success			200 {object} model.PackAnalyticsResp
// @Failure 		400 {object} httputil.HTTPError
// @Failure 		500 {object} httputil.HTTPError
// @Router			/analytics/packSales/:vendorId [get]
func (contr AnalyticsController) PackSales(c *gin.Context) {
	vendorId := c.Param("vendorId")
	if vendorId == "" {
		httputil.NewError(c, http.StatusBadRequest, &core.ErrorResp{Message: "vendorId param must be set"})
		return
	}

	granularity := c.Query("granularity")
	if !slices.Contains([]string{"day", "month", "year"}, granularity) {
		httputil.NewError(c, http.StatusBadRequest, &core.ErrorResp{Message: "granularity param must be day, month, year"})
		return
	}

	rawMonth := c.Query("month")
	month, err := strconv.ParseInt(rawMonth, 10, 64)
	monthOpts := []int64{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
	exists := false
	for _, m := range monthOpts {
		if m == month {
			exists = true
		}
	}
	if !exists {
		httputil.NewError(c, http.StatusBadRequest, &core.ErrorResp{Message: "month param must be present and a valid int month representation 1-12"})
		return
	}

	rawYear := c.Query("year")
	year, err := strconv.ParseInt(rawYear, 10, 64)

	currentYear := time.Now().Year()
	yearOpts := make([]int64, 0, 5)

	// Generate the list of the last 5 years
	for i := 0; i < 5; i++ {
		y := currentYear - i
		yearOpts = append(yearOpts, int64(y))
	}
	exists = false
	for _, y := range yearOpts {
		if y == year {
			exists = true
		}
	}
	if !exists {
		httputil.NewError(c, http.StatusBadRequest, &core.ErrorResp{Message: "year param must be present and a valid year int of the last 5"})
		return
	}

	packAnalyticResp, err := contr.analyticsService.PackSales(c, vendorId, granularity, month, year, c.Request.URL.String())
	if err != nil {
		httputil.NewError(c, http.StatusInternalServerError, err)
		return
	}
	c.JSON(http.StatusOK, packAnalyticResp)
	return
}

// @Summary			Get the pack qty sold analytics
// @Description		Get a list of packs and their qty sold
// @Param			vendorId path string true "vendor uid"
// @Accept			json
// @Produce			json
// @Tags			Analytics
// @Success			200 {object} []model.PackQtySoldAnalytic
// @Failure 		400 {object} httputil.HTTPError
// @Failure 		500 {object} httputil.HTTPError
// @Router			/analytics/packQtySold/:vendorId [get]
func (contr AnalyticsController) PackQtySold(c *gin.Context) {
	vendorId := c.Param("vendorId")
	if vendorId == "" {
		httputil.NewError(c, http.StatusBadRequest, &core.ErrorResp{Message: "vendorId param must be set"})
		return
	}

	packQtySoldAnalytics, err := contr.analyticsService.PackQtySold(c, vendorId)
	if err != nil {
		httputil.NewError(c, http.StatusInternalServerError, err)
		return
	}
	c.JSON(http.StatusOK, packQtySoldAnalytics)
	return

}
